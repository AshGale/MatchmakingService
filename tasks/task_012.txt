# Task ID: 12
# Title: Security Implementation
# Status: done
# Dependencies: 3, 4
# Priority: high
# Description: Implement security measures including rate limiting, input validation, and protection against common web vulnerabilities
# Details:
Implement comprehensive security measures to protect the application from common vulnerabilities. Include rate limiting, input validation, SQL injection prevention, and protection against other common web attacks.

Security middleware:
```javascript
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');
const { body, validationResult } = require('express-validator');

// Rate limiting middleware
const createRateLimiter = (windowMs, max, message) => {
  return rateLimit({
    windowMs,
    max,
    message: { error: message },
    standardHeaders: true,
    legacyHeaders: false,
  });
};

// General API rate limiter
const apiLimiter = createRateLimiter(
  15 * 60 * 1000, // 15 minutes
  100, // 100 requests per window
  'Too many requests, please try again later.'
);

// More strict rate limiter for authentication endpoints
const authLimiter = createRateLimiter(
  15 * 60 * 1000, // 15 minutes
  5, // 5 failed attempts per window
  'Too many login attempts, please try again later.'
);

// Input validation middleware
const validateRegistration = [
  body('username')
    .isLength({ min: 3, max: 30 })
    .withMessage('Username must be between 3 and 30 characters')
    .matches(/^[a-zA-Z0-9_-]+$/)
    .withMessage('Username can only contain letters, numbers, underscores and hyphens')
    .trim(),
  body('password')
    .isLength({ min: 8 })
    .withMessage('Password must be at least 8 characters long')
    .matches(/[a-z]/)
    .withMessage('Password must contain at least one lowercase letter')
    .matches(/[A-Z]/)
    .withMessage('Password must contain at least one uppercase letter')
    .matches(/[0-9]/)
    .withMessage('Password must contain at least one number')
];

const validateLogin = [
  body('username').trim().notEmpty().withMessage('Username is required'),
  body('password').notEmpty().withMessage('Password is required')
];

// Validation error handler
const handleValidationErrors = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }
  next();
};

// SQL injection prevention is handled by using parameterized queries in the database layer

module.exports = {
  apiLimiter,
  authLimiter,
  validateRegistration,
  validateLogin,
  handleValidationErrors,
  securityMiddleware: [
    helmet(), // Sets various HTTP headers for security
    express.json({ limit: '10kb' }), // Limit request body size
  ]
};
```

Implement these security measures throughout the application, especially for authentication routes and API endpoints that accept user input.

# Test Strategy:
Test rate limiting by exceeding the configured limits. Verify input validation rejects malformed inputs. Test SQL injection prevention by attempting to inject malicious SQL. Verify security headers are properly set. Test authentication flow security, including password complexity requirements and token handling. Perform security scanning with tools like OWASP ZAP to identify potential vulnerabilities.
