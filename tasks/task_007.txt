# Task ID: 7
# Title: WebSocket Integration
# Status: pending
# Dependencies: 4
# Priority: high
# Description: Implement WebSocket server for real-time communication between clients and server
# Details:
Set up WebSocket server using Socket.IO or native WebSockets for real-time communication. Implement event handling for lobby updates, game state changes, turn notifications, and chat messages.

Using Socket.IO:
```javascript
const http = require('http');
const socketIo = require('socket.io');
const jwt = require('jsonwebtoken');
const app = require('./app');

const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: '*', // Configure according to your security requirements
    methods: ['GET', 'POST']
  }
});

// Middleware to authenticate socket connections
io.use((socket, next) => {
  const token = socket.handshake.auth.token;
  if (!token) {
    return next(new Error('Authentication error: Token missing'));
  }
  
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    socket.user = decoded;
    next();
  } catch (error) {
    return next(new Error('Authentication error: Invalid token'));
  }
});

// Connection handler
io.on('connection', (socket) => {
  console.log(`User connected: ${socket.user.userId}`);
  
  // Join user to a room with their ID for direct messages
  socket.join(`user:${socket.user.userId}`);
  
  // Handle lobby events
  socket.on('join-lobby', (lobbyId) => {
    socket.join(`lobby:${lobbyId}`);
    io.to(`lobby:${lobbyId}`).emit('user-joined', { userId: socket.user.userId, lobbyId });
  });
  
  socket.on('leave-lobby', (lobbyId) => {
    socket.leave(`lobby:${lobbyId}`);
    io.to(`lobby:${lobbyId}`).emit('user-left', { userId: socket.user.userId, lobbyId });
  });
  
  // Handle game events
  socket.on('join-game', (gameId) => {
    socket.join(`game:${gameId}`);
  });
  
  socket.on('game-move', (data) => {
    // Process move and broadcast to other players
    io.to(`game:${data.gameId}`).emit('move-made', data);
  });
  
  // Handle disconnection
  socket.on('disconnect', () => {
    console.log(`User disconnected: ${socket.user.userId}`);
    // Handle cleanup if needed
  });
});

server.listen(process.env.PORT || 3000, () => {
  console.log(`Server running on port ${process.env.PORT || 3000}`);
});
```

Implement event handlers for all real-time features required by the application. Ensure proper error handling and reconnection logic.

# Test Strategy:
Test WebSocket connection establishment and authentication. Verify event emission and reception for all implemented events. Test room joining and leaving functionality. Verify broadcast messages reach all intended recipients. Test reconnection handling after client disconnection. Measure message delivery latency to ensure it meets performance requirements (<100ms).

# Subtasks:
## 1. WebSocket Server Setup with Authentication [pending]
### Dependencies: None
### Description: Implement a secure WebSocket server with token-based authentication
### Details:
Create a WebSocket server using a library like 'ws' for Node.js. Implement token-based authentication by validating credentials during the connection handshake. Use either query parameters, HTTP headers, or a message-based authentication system. Ensure connections are terminated if authentication fails.

## 2. Room Management System [pending]
### Dependencies: 7.1
### Description: Develop a system to manage users, lobbies, and game rooms
### Details:
Create data structures to track users, lobbies, and active games. Implement functions for creating/joining/leaving rooms, with appropriate access controls. Design a system to associate WebSocket connections with specific rooms and handle room state persistence.

## 3. Lobby Event Handling [pending]
### Dependencies: 7.2
### Description: Implement event handlers for lobby-related activities
### Details:
Create handlers for lobby events such as user joining/leaving, lobby creation/deletion, and chat messages. Implement broadcasting mechanisms to notify all relevant users of lobby state changes. Ensure proper validation of incoming lobby event messages.

## 4. Game State Event Handling [pending]
### Dependencies: 7.2
### Description: Develop handlers for game state changes and player actions
### Details:
Implement handlers for game-specific events like moves, actions, and state changes. Create a system to validate game actions against game rules. Design efficient state synchronization to broadcast game updates to all players in a room.

## 5. Connection Management and Error Handling [pending]
### Dependencies: 7.1, 7.2
### Description: Implement robust connection management with error recovery
### Details:
Create systems to handle disconnections, reconnections, and connection timeouts. Implement error handling for various failure scenarios. Design logging for debugging and monitoring. Develop strategies for graceful degradation during server issues.

