# Task ID: 4
# Title: Express.js Server Setup
# Status: done
# Dependencies: 1
# Priority: high
# Description: Set up Node.js server with Express.js framework, middleware configuration, and API route structure
# Details:
Initialize Node.js project with Express.js framework. Configure middleware for request parsing, CORS, logging, error handling, and security. Set up API route structure following RESTful principles.

Project structure:
```
/app
  /src
    /controllers
    /middleware
    /models
    /routes
    /services
    /utils
    app.js
    server.js
  package.json
  Dockerfile
```

Key middleware to include:
- express.json() for request body parsing
- helmet for security headers
- cors for Cross-Origin Resource Sharing
- morgan for request logging
- express-rate-limit for rate limiting
- custom error handling middleware

Example app.js:
```javascript
const express = require('express');
const helmet = require('helmet');
const cors = require('cors');
const morgan = require('morgan');
const rateLimit = require('express-rate-limit');

const authRoutes = require('./routes/auth');
const lobbyRoutes = require('./routes/lobbies');
const gameRoutes = require('./routes/games');

const app = express();

// Middleware
app.use(helmet());
app.use(cors());
app.use(express.json());
app.use(morgan('dev'));

// Rate limiting
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100 // limit each IP to 100 requests per windowMs
});
app.use('/api/', apiLimiter);

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/lobbies', lobbyRoutes);
app.use('/api/games', gameRoutes);

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(err.status || 500).json({
    error: {
      message: err.message || 'Internal Server Error'
    }
  });
});

module.exports = app;
```

# Test Strategy:
Test server startup and shutdown. Verify middleware functions correctly by sending various request types. Test rate limiting by exceeding the configured limits. Verify error handling by triggering various error conditions. Test API route structure with endpoint availability checks.

# Subtasks:
## 1. Initialize Project Structure [done]
### Dependencies: None
### Description: Set up the basic Express.js project structure with necessary folders and files
### Details:
Create project directory, initialize npm, install Express.js and core dependencies, set up folder structure (routes, controllers, middleware, config, utils), create entry point file (app.js/server.js), and set up basic Express instance

## 2. Configure Core Middleware [done]
### Dependencies: 4.1
### Description: Implement essential middleware for request parsing, security, and logging
### Details:
Install and configure middleware packages (body-parser/express.json, cors, helmet, morgan/winston for logging, compression), implement request validation middleware, and set up static file serving if needed

## 3. Implement Route Structure [done]
### Dependencies: 4.1, 4.2
### Description: Create modular route handlers with proper organization
### Details:
Create route files for different API endpoints, implement router modules with proper HTTP methods, set up controller functions for route handlers, implement request validation in routes, and mount all routes in the main application

## 4. Set Up Error Handling [done]
### Dependencies: 4.2, 4.3
### Description: Implement comprehensive error handling middleware and utilities
### Details:
Create custom error classes, implement global error handling middleware, set up 404 not found handler, add validation error handling, implement async error wrapper utility, and add error logging functionality

## 5. Configure Environment Management [done]
### Dependencies: 4.1
### Description: Set up environment-specific configurations and variables
### Details:
Install dotenv package, create environment configuration files (.env, .env.example), implement configuration loading module, set up different configurations for development/production/testing environments, and add environment validation to ensure required variables exist

