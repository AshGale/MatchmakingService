# Task ID: 13
# Title: Logging and Monitoring
# Status: done
# Dependencies: 4
# Priority: medium
# Description: Implement logging system for application events, errors, and security incidents
# Details:
Set up a comprehensive logging system to track application events, errors, and security incidents. Implement structured logging with appropriate log levels and context information.

Logging service:
```javascript
const winston = require('winston');
const path = require('path');

// Define log format
const logFormat = winston.format.combine(
  winston.format.timestamp(),
  winston.format.errors({ stack: true }),
  winston.format.json()
);

// Create logger instance
const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  format: logFormat,
  defaultMeta: { service: 'matchmaking-service' },
  transports: [
    // Console transport for development
    new winston.transports.Console({
      format: winston.format.combine(
        winston.format.colorize(),
        winston.format.simple()
      )
    }),
    // File transport for production
    new winston.transports.File({
      filename: path.join(__dirname, '../logs/error.log'),
      level: 'error',
      maxsize: 5242880, // 5MB
      maxFiles: 5,
    }),
    new winston.transports.File({
      filename: path.join(__dirname, '../logs/combined.log'),
      maxsize: 5242880, // 5MB
      maxFiles: 5,
    })
  ]
});

// Create request logger middleware
const requestLogger = (req, res, next) => {
  // Log request start
  const start = Date.now();
  const requestId = req.headers['x-request-id'] || Math.random().toString(36).substring(2, 15);
  
  // Add request ID to response headers
  res.setHeader('X-Request-ID', requestId);
  
  // Log request details
  logger.info({
    message: `${req.method} ${req.originalUrl} started`,
    requestId,
    method: req.method,
    url: req.originalUrl,
    ip: req.ip,
    userId: req.user?.id || 'anonymous'
  });
  
  // Log response on completion
  res.on('finish', () => {
    const duration = Date.now() - start;
    const level = res.statusCode >= 400 ? 'warn' : 'info';
    
    logger[level]({
      message: `${req.method} ${req.originalUrl} completed`,
      requestId,
      method: req.method,
      url: req.originalUrl,
      statusCode: res.statusCode,
      duration,
      userId: req.user?.id || 'anonymous'
    });
  });
  
  next();
};

// Error logger middleware
const errorLogger = (err, req, res, next) => {
  const requestId = res.getHeader('X-Request-ID') || 'unknown';
  
  logger.error({
    message: err.message,
    requestId,
    method: req.method,
    url: req.originalUrl,
    stack: err.stack,
    userId: req.user?.id || 'anonymous'
  });
  
  next(err);
};

// Security event logger
const logSecurityEvent = (event, details) => {
  logger.warn({
    message: `Security event: ${event}`,
    event,
    ...details,
    timestamp: new Date().toISOString()
  });
};

module.exports = {
  logger,
  requestLogger,
  errorLogger,
  logSecurityEvent
};
```

Integrate the logging system throughout the application, especially for authentication events, game state changes, and error handling.

# Test Strategy:
Verify logs are generated for different types of events (requests, errors, security incidents). Test log rotation and size limits. Verify sensitive information is not logged. Test error logging captures stack traces and relevant context. Verify logs are properly formatted and contain necessary information for debugging and monitoring.

# Subtasks:
## 1. Configure Logging Service [done]
### Dependencies: None
### Description: Set up a centralized logging service with appropriate transports and log formats
### Details:
Select and implement a logging library (like Winston or Pino). Configure log levels, formats (JSON preferred for machine readability), and storage options (file system, cloud storage). Set up log rotation and retention policies. Define environment-specific logging configurations.

## 2. Implement Request/Response Logging Middleware [done]
### Dependencies: 13.1
### Description: Create middleware to log all incoming requests and outgoing responses
### Details:
Develop middleware that captures request details (method, URL, headers, body), response details (status code, response time), and contextual information (user ID if authenticated, correlation IDs). Ensure sensitive data is properly redacted before logging. Integrate with the central logging service.

## 3. Implement Error Logging System [done]
### Dependencies: 13.1
### Description: Create a comprehensive error logging system that captures and logs all application errors
### Details:
Implement global error handlers to catch unhandled exceptions. Create structured error objects with stack traces, error codes, and contextual information. Set up alerting for critical errors. Ensure errors are properly categorized by severity. Integrate with the central logging service.

## 4. Set Up Security Event Monitoring [done]
### Dependencies: 13.1, 13.2
### Description: Implement logging for security-related events and suspicious activities
### Details:
Define security events to monitor (login attempts, permission changes, access to sensitive data). Create specialized logging for authentication events, authorization failures, and potential security threats. Implement rate limiting detection and logging. Set up alerts for suspicious patterns.

## 5. Create Monitoring Dashboard and Alerts [done]
### Dependencies: 13.1, 13.2, 13.3, 13.4
### Description: Set up visualization and alerting based on logged data
### Details:
Select and configure a monitoring tool to visualize log data. Create dashboards for application health, error rates, and security events. Set up alerting thresholds and notification channels (email, SMS, chat). Implement periodic log analysis reports. Test the entire logging and monitoring pipeline.

