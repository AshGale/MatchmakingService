# Task ID: 13
# Title: Logging and Monitoring
# Status: pending
# Dependencies: 4
# Priority: medium
# Description: Implement logging system for application events, errors, and security incidents
# Details:
Set up a comprehensive logging system to track application events, errors, and security incidents. Implement structured logging with appropriate log levels and context information.

Logging service:
```javascript
const winston = require('winston');
const path = require('path');

// Define log format
const logFormat = winston.format.combine(
  winston.format.timestamp(),
  winston.format.errors({ stack: true }),
  winston.format.json()
);

// Create logger instance
const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  format: logFormat,
  defaultMeta: { service: 'matchmaking-service' },
  transports: [
    // Console transport for development
    new winston.transports.Console({
      format: winston.format.combine(
        winston.format.colorize(),
        winston.format.simple()
      )
    }),
    // File transport for production
    new winston.transports.File({
      filename: path.join(__dirname, '../logs/error.log'),
      level: 'error',
      maxsize: 5242880, // 5MB
      maxFiles: 5,
    }),
    new winston.transports.File({
      filename: path.join(__dirname, '../logs/combined.log'),
      maxsize: 5242880, // 5MB
      maxFiles: 5,
    })
  ]
});

// Create request logger middleware
const requestLogger = (req, res, next) => {
  // Log request start
  const start = Date.now();
  const requestId = req.headers['x-request-id'] || Math.random().toString(36).substring(2, 15);
  
  // Add request ID to response headers
  res.setHeader('X-Request-ID', requestId);
  
  // Log request details
  logger.info({
    message: `${req.method} ${req.originalUrl} started`,
    requestId,
    method: req.method,
    url: req.originalUrl,
    ip: req.ip,
    userId: req.user?.id || 'anonymous'
  });
  
  // Log response on completion
  res.on('finish', () => {
    const duration = Date.now() - start;
    const level = res.statusCode >= 400 ? 'warn' : 'info';
    
    logger[level]({
      message: `${req.method} ${req.originalUrl} completed`,
      requestId,
      method: req.method,
      url: req.originalUrl,
      statusCode: res.statusCode,
      duration,
      userId: req.user?.id || 'anonymous'
    });
  });
  
  next();
};

// Error logger middleware
const errorLogger = (err, req, res, next) => {
  const requestId = res.getHeader('X-Request-ID') || 'unknown';
  
  logger.error({
    message: err.message,
    requestId,
    method: req.method,
    url: req.originalUrl,
    stack: err.stack,
    userId: req.user?.id || 'anonymous'
  });
  
  next(err);
};

// Security event logger
const logSecurityEvent = (event, details) => {
  logger.warn({
    message: `Security event: ${event}`,
    event,
    ...details,
    timestamp: new Date().toISOString()
  });
};

module.exports = {
  logger,
  requestLogger,
  errorLogger,
  logSecurityEvent
};
```

Integrate the logging system throughout the application, especially for authentication events, game state changes, and error handling.

# Test Strategy:
Verify logs are generated for different types of events (requests, errors, security incidents). Test log rotation and size limits. Verify sensitive information is not logged. Test error logging captures stack traces and relevant context. Verify logs are properly formatted and contain necessary information for debugging and monitoring.
